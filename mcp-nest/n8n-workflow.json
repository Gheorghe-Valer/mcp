{
  "name": "SAP OData MCP Workflow with Gemini AI",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "sap-chat",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-trigger",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "functionCode": "// Extract and validate input from SAPUI5\nconst userQuery = $json.query || $json.message || '';\nconst sessionId = $json.sessionId || null;\nconst userId = $json.userId || 'anonymous';\n\n// Log the incoming request\nconsole.log('Incoming request:', {\n  userQuery,\n  sessionId,\n  userId,\n  timestamp: new Date().toISOString()\n});\n\n// Prepare data for next nodes\nreturn {\n  json: {\n    userQuery: userQuery.trim(),\n    sessionId,\n    userId,\n    originalRequest: $json,\n    needsNewSession: !sessionId,\n    timestamp: new Date().toISOString()\n  }\n};"
      },
      "id": "input-processor",
      "name": "Process Input",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [460, 300]
    },
    {
      "parameters": {
        "url": "https://nest.open-hand.org/mcp",
        "authentication": "none",
        "requestMethod": "POST",
        "jsonParameters": true,
        "parametersJson": "{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"initialize\",\n  \"params\": {\n    \"protocolVersion\": \"2024-11-05\",\n    \"capabilities\": {\n      \"tools\": {}\n    },\n    \"clientInfo\": {\n      \"name\": \"n8n-workflow\",\n      \"version\": \"1.0.0\"\n    }\n  }\n}",
        "options": {
          "headers": {\n            \"Content-Type\": \"application/json\"\n          },\n          \"timeout\": 10000\n        }\n      },\n      \"id\": \"mcp-initialize\",\n      \"name\": \"Initialize MCP Session\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"typeVersion\": 4.1,\n      \"position\": [680, 200]\n    },\n    {\n      \"parameters\": {\n        \"url\": \"https://nest.open-hand.org/mcp\",\n        \"authentication\": \"none\",\n        \"requestMethod\": \"GET\",\n        \"options\": {\n          \"timeout\": 5000\n        }\n      },\n      \"id\": \"get-session-id\",\n      \"name\": \"Get Session ID\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"typeVersion\": 4.1,\n      \"position\": [900, 200]\n    },\n    {\n      \"parameters\": {\n        \"functionCode\": \"// Extract session ID from MCP response\\nconst sessionId = $json.headers?.['mcp-session-id'] || \\n                   $json.headers?.['x-session-id'] || \\n                   $json.headers?.['session-id'] ||\\n                   'no-session-found';\\n\\nconsole.log('Session ID extracted:', sessionId);\\nconsole.log('Available headers:', Object.keys($json.headers || {}));\\n\\nreturn {\\n  json: {\\n    sessionId,\\n    userQuery: $node['Process Input'].json.userQuery,\\n    userId: $node['Process Input'].json.userId,\\n    timestamp: new Date().toISOString()\\n  }\\n};\"\n      },\n      \"id\": \"extract-session\",\n      \"name\": \"Extract Session ID\",\n      \"type\": \"n8n-nodes-base.function\",\n      \"typeVersion\": 1,\n      \"position\": [1120, 200]\n    },\n    {\n      \"parameters\": {\n        \"url\": \"https://nest.open-hand.org/mcp\",\n        \"authentication\": \"none\",\n        \"requestMethod\": \"POST\",\n        \"jsonParameters\": true,\n        \"parametersJson\": \"{\\n  \\\"jsonrpc\\\": \\\"2.0\\\",\\n  \\\"id\\\": 2,\\n  \\\"method\\\": \\\"tools/call\\\",\\n  \\\"params\\\": {\\n    \\\"name\\\": \\\"sap_connect\\\"\\n  }\\n}\",\n        \"options\": {\n          \"headers\": {\n            \"Content-Type\": \"application/json\",\n            \"mcp-session-id\": \"={{$json.sessionId}}\"\n          },\n          \"timeout\": 15000\n        }\n      },\n      \"id\": \"sap-connect\",\n      \"name\": \"Connect to SAP\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"typeVersion\": 4.1,\n      \"position\": [1340, 200]\n    },\n    {\n      \"parameters\": {\n        \"url\": \"https://nest.open-hand.org/mcp\",\n        \"authentication\": \"none\",\n        \"requestMethod\": \"POST\",\n        \"jsonParameters\": true,\n        \"parametersJson\": \"{\\n  \\\"jsonrpc\\\": \\\"2.0\\\",\\n  \\\"id\\\": 3,\\n  \\\"method\\\": \\\"tools/call\\\",\\n  \\\"params\\\": {\\n    \\\"name\\\": \\\"sap_get_services\\\"\\n  }\\n}\",\n        \"options\": {\n          \"headers\": {\n            \"Content-Type\": \"application/json\",\n            \"mcp-session-id\": \"={{$json.sessionId}}\"\n          },\n          \"timeout\": 15000\n        }\n      },\n      \"id\": \"get-services\",\n      \"name\": \"Get Available Services\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"typeVersion\": 4.1,\n      \"position\": [1560, 200]\n    },\n    {\n      \"parameters\": {\n        \"model\": \"gemini-1.5-pro\",\n        \"prompt\": \"You are an SAP OData expert AI assistant. You have access to SAP OData tools through an MCP server.\\n\\nAvailable SAP OData services: {{$json.content[0].text}}\\n\\nUser Query: {{$node['Extract Session ID'].json.userQuery}}\\n\\nYour task:\\n1. Analyze the user's request\\n2. Determine which SAP service and operation is needed\\n3. Return a JSON response with the recommended action\\n\\nResponse format:\\n{\\n  \\\"action\\\": \\\"get_metadata\\\"|\\\"query_data\\\"|\\\"explain\\\",\\n  \\\"serviceName\\\": \\\"service_name_if_applicable\\\",\\n  \\\"entitySet\\\": \\\"entity_set_if_applicable\\\",\\n  \\\"explanation\\\": \\\"Clear explanation of what you'll do\\\",\\n  \\\"needsMetadata\\\": true|false\\n}\\n\\nExamples:\\n- \\\"Show me purchase orders\\\" → get metadata for API_PURCHASEORDER_PROCESS_SRV\\n- \\\"What data is available?\\\" → explain available services\\n- \\\"Get business partner info\\\" → get metadata for API_BUSINESS_PARTNER\\n\\nProvide only the JSON response, no other text.\",\n        \"options\": {\n          \"temperature\": 0.1,\n          \"maxTokens\": 500\n        }\n      },\n      \"id\": \"gemini-analyzer\",\n      \"name\": \"Gemini AI Analyzer\",\n      \"type\": \"n8n-nodes-base.googleGemini\",\n      \"typeVersion\": 1,\n      \"position\": [1780, 200]\n    },\n    {\n      \"parameters\": {\n        \"functionCode\": \"// Parse Gemini AI response and prepare next action\\nlet aiResponse;\\ntry {\\n  const responseText = $json.text || $json.response || '';\\n  aiResponse = JSON.parse(responseText);\\n} catch (error) {\\n  console.error('Failed to parse AI response:', error);\\n  aiResponse = {\\n    action: 'explain',\\n    explanation: 'I could not understand your request. Please try again with a more specific question about SAP data.',\\n    needsMetadata: false\\n  };\\n}\\n\\nconsole.log('AI Analysis:', aiResponse);\\n\\n// Prepare data for conditional routing\\nreturn {\\n  json: {\\n    action: aiResponse.action,\\n    serviceName: aiResponse.serviceName,\\n    entitySet: aiResponse.entitySet,\\n    explanation: aiResponse.explanation,\\n    needsMetadata: aiResponse.needsMetadata || false,\\n    sessionId: $node['Extract Session ID'].json.sessionId,\\n    userQuery: $node['Extract Session ID'].json.userQuery,\\n    originalAiResponse: aiResponse\\n  }\\n};\"\n      },\n      \"id\": \"parse-ai-response\",\n      \"name\": \"Parse AI Response\",\n      \"type\": \"n8n-nodes-base.function\",\n      \"typeVersion\": 1,\n      \"position\": [2000, 200]\n    },\n    {\n      \"parameters\": {\n        \"conditions\": {\n          \"options\": {\n            \"caseSensitive\": true,\n            \"leftValue\": \"\",\n            \"typeValidation\": \"strict\"\n          },\n          \"conditions\": [\n            {\n              \"leftValue\": \"={{$json.action}}\",\n              \"rightValue\": \"get_metadata\",\n              \"operator\": {\n                \"type\": \"string\",\n                \"operation\": \"equals\"\n              }\n            },\n            {\n              \"leftValue\": \"={{$json.action}}\",\n              \"rightValue\": \"query_data\",\n              \"operator\": {\n                \"type\": \"string\",\n                \"operation\": \"equals\"\n              }\n            }\n          ],\n          \"combineOperation\": \"any\"\n        },\n        \"fallbackOutput\": \"extra\"\n      },\n      \"id\": \"action-router\",\n      \"name\": \"Route Action\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"typeVersion\": 2,\n      \"position\": [2220, 200]\n    },\n    {\n      \"parameters\": {\n        \"url\": \"https://nest.open-hand.org/mcp\",\n        \"authentication\": \"none\",\n        \"requestMethod\": \"POST\",\n        \"jsonParameters\": true,\n        \"parametersJson\": \"{\\n  \\\"jsonrpc\\\": \\\"2.0\\\",\\n  \\\"id\\\": 4,\\n  \\\"method\\\": \\\"tools/call\\\",\\n  \\\"params\\\": {\\n    \\\"name\\\": \\\"sap_get_service_metadata\\\",\\n    \\\"arguments\\\": {\\n      \\\"serviceName\\\": \\\"={{$json.serviceName}}\\\"\\n    }\\n  }\\n}\",\n        \"options\": {\n          \"headers\": {\n            \"Content-Type\": \"application/json\",\n            \"mcp-session-id\": \"={{$json.sessionId}}\"\n          },\n          \"timeout\": 20000\n        }\n      },\n      \"id\": \"get-metadata\",\n      \"name\": \"Get Service Metadata\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"typeVersion\": 4.1,\n      \"position\": [2440, 100]\n    },\n    {\n      \"parameters\": {\n        \"model\": \"gemini-1.5-pro\",\n        \"prompt\": \"Based on the SAP service metadata below, provide a helpful response to the user.\\n\\nUser Query: {{$node['Parse AI Response'].json.userQuery}}\\nService Metadata: {{$json.content[0].text}}\\n\\nProvide:\\n1. A clear explanation of what data is available\\n2. Key entities and their purposes\\n3. Example queries the user could ask\\n4. Suggest specific questions they could ask about this data\\n\\nBe conversational and helpful. Focus on business value, not technical details.\",\n        \"options\": {\n          \"temperature\": 0.3,\n          \"maxTokens\": 800\n        }\n      },\n      \"id\": \"metadata-explainer\",\n      \"name\": \"Explain Metadata\",\n      \"type\": \"n8n-nodes-base.googleGemini\",\n      \"typeVersion\": 1,\n      \"position\": [2660, 100]\n    },\n    {\n      \"parameters\": {\n        \"model\": \"gemini-1.5-pro\",\n        \"prompt\": \"The user asked: {{$node['Parse AI Response'].json.userQuery}}\\n\\nBased on available SAP services, here's what I found:\\n{{$node['Get Available Services'].json.content[0].text}}\\n\\nProvide a helpful response explaining:\\n1. What SAP data services are available\\n2. What kind of questions they can ask\\n3. Examples like 'Show me purchase order data' or 'What business partner information is available'\\n\\nBe friendly and encourage them to ask specific questions.\",\n        \"options\": {\n          \"temperature\": 0.4,\n          \"maxTokens\": 600\n        }\n      },\n      \"id\": \"general-helper\",\n      \"name\": \"General Helper\",\n      \"type\": \"n8n-nodes-base.googleGemini\",\n      \"typeVersion\": 1,\n      \"position\": [2440, 300]\n    },\n    {\n      \"parameters\": {\n        \"functionCode\": \"// Format the final response for SAPUI5\\nlet responseText = '';\\nlet responseType = 'info';\\n\\n// Determine response source and format\\nif ($json.text) {\\n  // Response from Gemini AI\\n  responseText = $json.text;\\n  responseType = 'ai_response';\\n} else if ($json.content && $json.content[0]) {\\n  // Response from MCP service\\n  responseText = $json.content[0].text;\\n  responseType = 'service_data';\\n} else {\\n  responseText = 'I encountered an issue processing your request. Please try again.';\\n  responseType = 'error';\\n}\\n\\n// Format response for SAPUI5\\nconst response = {\\n  success: true,\\n  message: responseText,\\n  type: responseType,\\n  timestamp: new Date().toISOString(),\\n  sessionId: $node['Extract Session ID']?.json?.sessionId,\\n  query: $node['Extract Session ID']?.json?.userQuery\\n};\\n\\nconsole.log('Final response:', response);\\n\\nreturn { json: response };\"\n      },\n      \"id\": \"format-response\",\n      \"name\": \"Format Response\",\n      \"type\": \"n8n-nodes-base.function\",\n      \"typeVersion\": 1,\n      \"position\": [2880, 200]\n    },\n    {\n      \"parameters\": {\n        \"respondWith\": \"json\",\n        \"responseBody\": \"={{$json}}\",\n        \"options\": {\n          \"responseHeaders\": {\n            \"Content-Type\": \"application/json\",\n            \"Access-Control-Allow-Origin\": \"*\",\n            \"Access-Control-Allow-Methods\": \"POST, OPTIONS\",\n            \"Access-Control-Allow-Headers\": \"Content-Type, Authorization\"\n          }\n        }\n      },\n      \"id\": \"webhook-response\",\n      \"name\": \"Send Response\",\n      \"type\": \"n8n-nodes-base.respondToWebhook\",\n      \"typeVersion\": 1,\n      \"position\": [3100, 200]\n    }\n  ],\n  \"connections\": {\n    \"Webhook Trigger\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Process Input\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Process Input\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Initialize MCP Session\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Initialize MCP Session\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Get Session ID\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Get Session ID\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Extract Session ID\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Extract Session ID\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Connect to SAP\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Connect to SAP\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Get Available Services\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Get Available Services\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Gemini AI Analyzer\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Gemini AI Analyzer\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Parse AI Response\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Parse AI Response\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Route Action\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Route Action\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Get Service Metadata\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [],\n        [\n          {\n            \"node\": \"General Helper\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Get Service Metadata\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Explain Metadata\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Explain Metadata\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Format Response\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"General Helper\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Format Response\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Format Response\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Send Response\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  },\n  \"pinData\": {},\n  \"settings\": {\n    \"executionOrder\": \"v1\"\n  },\n  \"staticData\": null,\n  \"tags\": [\n    {\n      \"createdAt\": \"2024-01-01T00:00:00.000Z\",\n      \"updatedAt\": \"2024-01-01T00:00:00.000Z\",\n      \"id\": \"1\",\n      \"name\": \"SAP Integration\"\n    },\n    {\n      \"createdAt\": \"2024-01-01T00:00:00.000Z\",\n      \"updatedAt\": \"2024-01-01T00:00:00.000Z\",\n      \"id\": \"2\",\n      \"name\": \"MCP Tools\"\n    },\n    {\n      \"createdAt\": \"2024-01-01T00:00:00.000Z\",\n      \"updatedAt\": \"2024-01-01T00:00:00.000Z\",\n      \"id\": \"3\",\n      \"name\": \"Gemini AI\"\n    }\n  ],\n  \"triggerCount\": 1,\n  \"updatedAt\": \"2024-01-01T00:00:00.000Z\",\n  \"versionId\": \"1\"\n}